<?php


/**
 * This class defines the structure of the 'facturas' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Apr 29 01:37:14 2011
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class FacturasTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.FacturasTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('facturas');
		$this->setPhpName('Facturas');
		$this->setClassname('Facturas');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID_FACTURA', 'IdFactura', 'INTEGER', true, 11, null);
		$this->addColumn('ID_CLIENTE', 'IdCliente', 'INTEGER', true, 11, 0);
		$this->addColumn('FECHA_DESDE', 'FechaDesde', 'DATE', true, null, '0000-00-00');
		$this->addColumn('FECHA_HASTA', 'FechaHasta', 'DATE', true, null, '0000-00-00');
		$this->addColumn('PRECIO_OK', 'PrecioOk', 'DOUBLE', true, null, 0);
		$this->addColumn('PRECIO_FALLIDA', 'PrecioFallida', 'DOUBLE', true, null, 0);
		$this->addColumn('VALIDAS', 'Validas', 'INTEGER', true, 11, 0);
		$this->addColumn('TOTALV', 'Totalv', 'DOUBLE', true, null, 0);
		$this->addColumn('FALLIDAS', 'Fallidas', 'INTEGER', true, 11, 0);
		$this->addColumn('TOTALF', 'Totalf', 'DOUBLE', true, null, 0);
		$this->addColumn('DESCUENTO', 'Descuento', 'INTEGER', true, 11, 0);
		$this->addColumn('TOTALD', 'Totald', 'DOUBLE', true, null, 0);
		$this->addColumn('TOTAL', 'Total', 'DOUBLE', true, null, 0);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // FacturasTableMap
